//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DIMERCO.eCall.Feedback.eCallAPI {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterfaceInfo", Namespace="http://schemas.datacontract.org/2004/07/eCallService")]
    [System.SerializableAttribute()]
    public partial class InterfaceInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPWField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPW {
            get {
                return this.UserPWField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPWField, value) != true)) {
                    this.UserPWField = value;
                    this.RaisePropertyChanged("UserPW");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eCallAPI.IServiceForOPS")]
    public interface IServiceForOPS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GetData", ReplyAction="http://tempuri.org/IServiceForOPS/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GetData", ReplyAction="http://tempuri.org/IServiceForOPS/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GetLogisticsStatus", ReplyAction="http://tempuri.org/IServiceForOPS/GetLogisticsStatusResponse")]
        System.Data.DataSet GetLogisticsStatus(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, string mawbNO, string hawbNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GetLogisticsStatus", ReplyAction="http://tempuri.org/IServiceForOPS/GetLogisticsStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLogisticsStatusAsync(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, string mawbNO, string hawbNO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORT", ReplyAction="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTResponse")]
        System.Data.DataSet GET_FREIGHTTRANSPORT(string status, string stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORT", ReplyAction="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GET_FREIGHTTRANSPORTAsync(string status, string stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTByGroupID", ReplyAction="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTByGroupIDResponse")]
        System.Data.DataSet GET_FREIGHTTRANSPORTByGroupID(string status, string stationGroupID, string stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTByGroupID", ReplyAction="http://tempuri.org/IServiceForOPS/GET_FREIGHTTRANSPORTByGroupIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GET_FREIGHTTRANSPORTByGroupIDAsync(string status, string stationGroupID, string stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/POST_Ack", ReplyAction="http://tempuri.org/IServiceForOPS/POST_AckResponse")]
        bool POST_Ack(System.Data.DataSet dtAck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/POST_Ack", ReplyAction="http://tempuri.org/IServiceForOPS/POST_AckResponse")]
        System.Threading.Tasks.Task<bool> POST_AckAsync(System.Data.DataSet dtAck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/Insert_OrderInfo", ReplyAction="http://tempuri.org/IServiceForOPS/Insert_OrderInfoResponse")]
        bool Insert_OrderInfo(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, System.Data.DataSet dsOrder, byte[][] fileContent, string[] fileName, string[] fileMD5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceForOPS/Insert_OrderInfo", ReplyAction="http://tempuri.org/IServiceForOPS/Insert_OrderInfoResponse")]
        System.Threading.Tasks.Task<bool> Insert_OrderInfoAsync(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, System.Data.DataSet dsOrder, byte[][] fileContent, string[] fileName, string[] fileMD5);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceForOPSChannel : DIMERCO.eCall.Feedback.eCallAPI.IServiceForOPS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceForOPSClient : System.ServiceModel.ClientBase<DIMERCO.eCall.Feedback.eCallAPI.IServiceForOPS>, DIMERCO.eCall.Feedback.eCallAPI.IServiceForOPS {
        
        public ServiceForOPSClient() {
        }
        
        public ServiceForOPSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceForOPSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceForOPSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceForOPSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Data.DataSet GetLogisticsStatus(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, string mawbNO, string hawbNO) {
            return base.Channel.GetLogisticsStatus(interfaceAuth, mawbNO, hawbNO);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLogisticsStatusAsync(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, string mawbNO, string hawbNO) {
            return base.Channel.GetLogisticsStatusAsync(interfaceAuth, mawbNO, hawbNO);
        }
        
        public System.Data.DataSet GET_FREIGHTTRANSPORT(string status, string stationID) {
            return base.Channel.GET_FREIGHTTRANSPORT(status, stationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GET_FREIGHTTRANSPORTAsync(string status, string stationID) {
            return base.Channel.GET_FREIGHTTRANSPORTAsync(status, stationID);
        }
        
        public System.Data.DataSet GET_FREIGHTTRANSPORTByGroupID(string status, string stationGroupID, string stationID) {
            return base.Channel.GET_FREIGHTTRANSPORTByGroupID(status, stationGroupID, stationID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GET_FREIGHTTRANSPORTByGroupIDAsync(string status, string stationGroupID, string stationID) {
            return base.Channel.GET_FREIGHTTRANSPORTByGroupIDAsync(status, stationGroupID, stationID);
        }
        
        public bool POST_Ack(System.Data.DataSet dtAck) {
            return base.Channel.POST_Ack(dtAck);
        }
        
        public System.Threading.Tasks.Task<bool> POST_AckAsync(System.Data.DataSet dtAck) {
            return base.Channel.POST_AckAsync(dtAck);
        }
        
        public bool Insert_OrderInfo(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, System.Data.DataSet dsOrder, byte[][] fileContent, string[] fileName, string[] fileMD5) {
            return base.Channel.Insert_OrderInfo(interfaceAuth, dsOrder, fileContent, fileName, fileMD5);
        }
        
        public System.Threading.Tasks.Task<bool> Insert_OrderInfoAsync(DIMERCO.eCall.Feedback.eCallAPI.InterfaceInfo interfaceAuth, System.Data.DataSet dsOrder, byte[][] fileContent, string[] fileName, string[] fileMD5) {
            return base.Channel.Insert_OrderInfoAsync(interfaceAuth, dsOrder, fileContent, fileName, fileMD5);
        }
    }
}
